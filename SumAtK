/*
Create a queue of Node pointer
insert the root
pop the front element 
    Check if the level is K or not 
        if it is then simply add it to the sum variable and initialise flag = 1(indicates that the level has been tracked)
    Check if a left node exists if yes then push it too the queue
    Check if a right node exists then push it to the queue
inc level anf=d check if flag == k then brak
*/
#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node *left;
    Node*right;
    Node(int val)
    {
        data = val;
        left = NULL;
        right = NULL;
    }
};
int SumAtK(Node *root,int K)
{
    if(root==NULL)
    {
        return -1;
    }
    queue<Node*> q;
    q.push(root);
    q.push(NULL);

    int level = 0;
    int sum = 0;
    while(!q.empty())
    {
        Node* node = q.front();
        q.pop();
        if(node!=NULL)
        {
        if(level == K)
            {
                sum += node->data;
                
             }
             if(node->left){
                q.push(node->left);
            }
            if(node->right)
            {
                q.push(node->right);
            }
        }
        else if(!q.empty())
        {
            q.push(NULL);
            level++;
        }
    }
    return sum;
}
int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);
    cout<<SumAtK(root,2)<<endl;
}
